import { NextResponse } from "next/server";
import { stripe } from "@/lib/stripe";
import prismadb from "@/lib/prismadb";
import { absoluteUrl } from "@/lib/utils";
import { PreRegisterForm2Values } from "@/components/forms/preRegisterForm2";
import { Resend } from "resend";
import SchooldazeThankyou, { SchoolDazeThankYouEmailProps } from "@/emails/thankyou";

//TODO: If customer books more than once, the second passenger on all subsequent bookings will still be the second passenger from the first booking - need to fix or prevent booking more than once under the same email

const bookedUrl = absoluteUrl("/booking/complete");
const cancelUrl = absoluteUrl(); //TODO: delete from database if cancelled

const resend = new Resend(process.env.RESEND_API_KEY);

const formatPrice = (price: number) => {
  return (price / 100).toLocaleString("en-US", {
    style: "currency",
    currency: "USD",
  });
};
export async function POST(req: Request) {
  let emailInDB = false;
  const body = await req.json();

  // const props: SchoolDazeThankYouEmailProps = {
  //   numPassengers: 2,
  //   registrationId: '123432123344',
  //   cabinPrice: '$198.00',
  //   cabinType: 'Interior Bella',
  //   firstName: 'John',
  //   lastName: 'Doe',
  //   paidNow: '$198.00',
  //   paymentOption: 'deposit_only'

  // }
  // const data = await resend.emails.send({
  //   from: 'Leisure Life Vacations <admin@leisurelifevacations.net>',
  //   to: ['admin@leisurelifevacations.net', 'leisurelifecruises@gmail.com'],
  //   subject: 'School Daze Inaugural Cruise Booked!',
  //   react: SchooldazeThankyou(props)
  // });

  //   console.log("line:118 - email sent = ", data);

  //   return new NextResponse(JSON.stringify({ url: '/' }));

  //get email from first passenger
  const email = body.cabins[0].passengers[0].email;
  const payNowPrice = body.cabins[0].payNowPrice;
  const payNow = body.cabins[0].payNow.replaceAll("_", " ").toUpperCase();
  const cabinType = body.cabins[0].cabinType.replaceAll("_", " ").toUpperCase();
  const cabinPrice = (body.cabins[0].cabinPrice * 2 ) + 7500 * 2;
  

  let customer;
  let secondPassenger;
  //check if email of passenger 1 already exists in database
    const pass = await prismadb.schoolDazePassenger.findFirst({
        where: {
        email: email,
        },
        select: {
        email: true,
        id: true,
        cabinFormId: true,
        
        },
        
    });
    console.log('pass = ',pass);
   if(pass?.id){
    const cabin = await prismadb.schoolDazeCabinForm.findFirst({
        where: {
        id: pass.cabinFormId,
        },
        select: {
        id: true,
        preRegisterFormId: true,
        },
    });
    console.log('cabin = ',cabin);
    if(cabin?.preRegisterFormId){
        customer = await prismadb.schoolDazeRegisterForm.findFirst({
            where: {
            id: cabin.preRegisterFormId,
            },
            select: {
            id: true,
            },
        });
    }
    
   }
   console.log('customer = ',customer);
  //check if email of passenger 2 already exists in database
  if(body.cabins[0].passengers[1]){
    const pass2 = await prismadb.schoolDazePassenger.findFirst({
        where: {
        email: body.cabins[0].passengers[1].email,
        },
        select: {
        email: true,
        id: true,
        cabinFormId: true,
        
        },
        
    });
    console.log('pass2 = ',pass2);
   if(pass2?.id){
    const cabin2 = await prismadb.schoolDazeCabinForm.findFirst({
        where: {
        id: pass2.cabinFormId,
        },
        select: {
        id: true,
        preRegisterFormId: true,
        },
    });
    console.log('cabin2 = ',cabin2);
    if(cabin2?.preRegisterFormId){
        secondPassenger = await prismadb.schoolDazeRegisterForm.findFirst({
            where: {
            id: cabin2.preRegisterFormId,
            },
            select: {
            id: true,
            
            },
        });
    }
    
   }
   console.log('secondPassenger = ',secondPassenger);
  }

//ADD NEW CUSTOMER TO DATABASE
    if(!customer?.id){
        try {
            customer = await prismadb.schoolDazeRegisterForm.create({
              data: {
                tripName: "School Daze Cruise",
                partyName: body.cabins[0].passengers[0].lastName,
                numCabins: body.cabinsInParty,
        
                cabins: {
                  create: body.cabins.map((cabin: any) => {
                    return {
                      cabinType: cabin.cabinType,
                      cabinPrice: cabin.cabinPrice,
                      numPassengers: cabin.numPassengers,
                      passengers: {
                        create: cabin.passengers.map((passenger: any) => {
                          
                          return {
                            paxType: passenger.paxType,
                            firstName: passenger.firstName,
                            middleName: "",
                            lastName: passenger.lastName,
                            gender: passenger.gender,
                            dob: passenger.dob,
                            age: 0,
                            email: passenger.email,
                            phone: passenger.phone,
                            school: passenger.school,
                            city: passenger.city,
                            state: passenger.state,
                            country: "US",
                            zip: passenger.zip,
                            address: "",
                            contactMethod: passenger.method,
                            loyaltyNum: passenger.loyalty,
                          };
                        }),
                      },
                    };
                  }),
                },
              },
            });
            console.log(customer);
          } catch (error) {
            console.log("[DB_ERROR]", error);
            return new NextResponse("Internal Server Error", { status: 500 });
          }
    }

  try {
    // const cruiseBooking = await prismadb.stripeCruiseBooking.findFirst({
    //   where: {
    //     registerId: customer.id,
    //   },
    //   select: {
    //     stripeCustomerId: true,
    //     amountPaid: true,
    //     totalPrice: true,
    //   },
    // });
    // if (cruiseBooking) {
    //   const stripeSession = await stripe.billingPortal.sessions.create({
    //     customer: cruiseBooking.stripeCustomerId!,
    //     return_url: bookedUrl, //BOOKED URL WILL CONTAIN OPTION TO MAKE ADDITIONAL PAYMENTS
    //   });
    //   return new NextResponse(JSON.stringify({ url: stripeSession.url }));
    // }
console.log('starting stripe session.....')

    const stripeSession = await stripe.checkout.sessions.create({
      success_url: `${bookedUrl}?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: cancelUrl,
      payment_method_types: ["card", "cashapp"],
      mode: "payment",
      customer_email: email,
      invoice_creation: 
      {enabled: true,
        invoice_data: {metadata: 
            {registerId: customer.id,
              customerFirstName: body.cabins[0].passengers[0].firstName,
              customerLastName: body.cabins[0].passengers[0].lastName,
              customerPhone: body.cabins[0].passengers[0].phone,
              customerEmail: email,
              cabinPrice: formatPrice(cabinPrice),
              cabinPriceNumber: cabinPrice,
              cabinType,
              payNowPrice: formatPrice(payNowPrice),
              payNowPriceNumber: payNowPrice,
              payNow,
              numPassengers: body.cabins[0].numPassengers,}}},
      line_items: [
        {
          quantity: 1,
          price_data: {
            currency: "usd",
            //product: process.env.SCHOOLDAZE_STRIPE_PRODUCT_ID,
            unit_amount: payNowPrice, //$198.00,
            product_data: {
              name: "School Daze Cruise",
              description: `School Daze Cruise - ${cabinType.replaceAll(
                "_",
                "-"
              ).toUpperCase()} - ${payNow.replaceAll("_", " ")}: ${formatPrice(
                payNowPrice
              )} (of ${formatPrice(cabinPrice)} total cabin price plus $75.00 taxes and fees)`,

              // images: ["https://picsum.photos/200/300"],
            },
          },
        },
      ],
      metadata: {
        registerId: customer.id,
        customerFirstName: body.cabins[0].passengers[0].firstName,
        customerLastName: body.cabins[0].passengers[0].lastName,
        customerPhone: body.cabins[0].passengers[0].phone,
        customerEmail: email,
        cabinPrice: formatPrice(cabinPrice),
        cabinType,
        payNowPrice: formatPrice(payNowPrice),
        payNow,
        numPassengers: body.cabins[0].numPassengers,

      },
    });
    return new NextResponse(JSON.stringify({ url: stripeSession.url }));
  } catch (error) {
    console.log("[STRIPE_ERROR]", error);
    //TODO delete all customers from database using email list on stripe error
    // const cabinID = prismadb.schoolDazeRegisterForm.findUnique({
    //   where: {
    //     id: customer.id,
    //   },
    //   select: {
    //     cabins: {
    //       select: {
    //         id: true,
    //       },
    //     },
    //   },
    // });
    // for (let i = 0; i < emails.length; i++) {
    //   const email = emails[i];
    //   await prismadb.schoolDazePassenger.delete({
    //     where: {
    //       email: email,
    //     },
    //   });
    //   const _cabins: any = await prismadb.schoolDazeRegisterForm.findUnique({
    //     where: {
    //       id: customer.id,
    //     },
    //     select: {
    //       cabins: {
    //         select: {
    //           id: true,
    //         },
    //       },
    //     },
    //   });

    //   await prismadb.schoolDazeCabinForm.delete({
    //     where: {
    //       id: _cabins.cabins[0].id,
    //     },
    //   });

    //   if (customer) {
    //     await prismadb.schoolDazeRegisterForm.delete({
    //       where: {
    //         id: customer.id,
    //       },
    //     });
    //   }
    // }

    // await prismadb.preRegisterForm.delete({
    //   where: {
    //     id: customer.id,
    //   },
    // });

    return new NextResponse("internal error", { status: 500 });
  }
}
